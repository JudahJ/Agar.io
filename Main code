from turtle import *
import random
import time

# Screen Setup
screen = Screen()
screen.title("Turtle.io")
screen.bgcolor("white")
screen.tracer(0)
screen.setup(width=800, height=600)
screen.listen()

#List of colors
Color_list = ["pink", "orange", "purple", "brown", "cyan"]

# Base Player Class
class Players:
    def __init__(self, Shape, Speed, Color, playerSize, xcor, ycor):
        self.Shape = Shape
        self.Speed = Speed
        self.Color = Color
        self.size = playerSize
        self.xcor = xcor
        self.ycor = ycor
        self.Player = Turtle()
        self.Player.penup()
        self.Player.goto(xcor, ycor)
        self.Player.shape(Shape)
        self.Player.shapesize(playerSize)
        self.Player.color(Color)
        self.Player.penup()


# Movement controls
class Controls(Players):
    def move_up(self):
        self.Player.setheading(90)
        y = self.Player.ycor() + self.Speed
        if y < 290:  # Top of the screen
            self.Player.sety(y)

    def move_down(self): 
        self.Player.setheading(270)
        y = self.Player.ycor() - self.Speed
        if y > -290:  # Bottom of the screen
            self.Player.sety(y)

    def move_left(self):
        self.Player.setheading(180)
        x = self.Player.xcor() - self.Speed
        if x > -390:  # Left side of the screen
            self.Player.setx(x)

    def move_right(self):
        self.Player.setheading(0)
        x = self.Player.xcor() + self.Speed
        if x < 390:  # Right side of the screen
            self.Player.setx(x)

#Arrow key inputs for player 1
class Player_1(Controls):
    def setup_controls(self):
        screen.onkey(self.move_up, "Up")
        screen.onkey(self.move_down, "Down")
        screen.onkey(self.move_left, "Left")
        screen.onkey(self.move_right, "Right")

#WASD input for player 2
class Player_2(Controls):
    def setup_controls(self):
        screen.onkey(self.move_up, "w")
        screen.onkey(self.move_down, "s")
        screen.onkey(self.move_left, "a")
        screen.onkey(self.move_right, "d")

#This class drops food in random spots across the map
class Food:
    def __init__(self, num_of_food):
        self.food_list = []
        for _ in range(num_of_food):
            blob = Turtle()
            blob.shape("circle")
            blob.color(random.choice(Color_list))
            blob.penup()
            blob.speed(0)
            blob.goto(random.randint(-390, 390), random.randint(-290, 290))
            self.food_list.append(blob)

#Class for eating food and eating other player
class Collision:
    def __init__(self, player1, player2, food_class):
        self.player1 = player1
        self.player2 = player2
        self.food_class = food_class

    def check_food_collision(self, player):
        for blob in self.food_class.food_list:
            if player.Player.distance(blob) < (player.size * 10 + 15):  # Each time the player grows, so does the hitbox
                blob.goto(random.randint(-390, 390), random.randint(-290, 290))  # change foods position
                player.size += 0.1  # Grow player
                player.Player.shapesize(player.size)

    def check_player_collision(self):
        if self.player1.Player.distance(self.player2.Player) < (self.player1.size * 10 + 5):
            if self.player1.size > self.player2.size:
                player2.Player.hideturtle()
                player1.Player.shapesize(player1.size + player2.size) #Add player2 size to player1's
                screen.update()
                time.sleep(1)
                self.end_game("Red Wins!", Turtle())
            elif self.player1.size < self.player2.size:
                player1.Player.hideturtle()
                player2.Player.shapesize(player2.size + player1.size) #grow player1's size  to player2's
                screen.update()
                time.sleep(1)
                self.end_game("Blue Wins!", Turtle())

    def end_game(self, message, pen):
        pen.goto(-150,0)
        screen.clear()
        screen.update()
        pen.write(message, move=False, align='left', font=('Times New Roman', 50, 'normal'))
        time.sleep(2)
        screen.bye()  # Closes the game window

# Setup Players and Food
player1 = Player_1("turtle", 20, "red", 1, 350, 0)
player1.setup_controls()

player2 = Player_2("turtle", 20, "blue", 1, -350, 0)
player2.setup_controls()

food = Food(15) 
collision = Collision(player1, player2, food)

# Main Game Loop
while True:
    screen.update()
    collision.check_food_collision(player1)
    collision.check_food_collision(player2)
    collision.check_player_collision()
